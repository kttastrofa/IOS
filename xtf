#!/bin/sh
POSIXLY_CORRECT=yes
LC_NUMERIC=

#login:     xmeciak00
#author:    Katarina Meciarova

print_hlp_fun() { #prints breaf instruction
    echo "

                    Hello!

                    Here's some help:
                    [-h|--help] [FILTR] [PŘÍKAZ] UŽIVATEL LOG [LOG2 [...]]

                    '-h' or '--help'      : is what you can see right now :)

                    for FILTR you can use:
                    '-a [DATETIME]'       : returns every log after used [DATETIME], use format \"YYYY-MM-DD HH:MM:SS\"
                    '-b [DATETIME]'       : returns every log before used [DATETIME], use format \"YYYY-MM-DD HH:MM:SS\"
                    '-c [CURRENCY]'       : returns every log with used [CURRENCY], for codes of currencies call 'list-currency'

                    for PŘÍKAZ you can use:
                    'list'                : returns list of every log of yours
                    'list-currency'       : returns list of every currency in alphabetical order
                    'status'              : returns list of every -- status of every currency you maintain
                    'profit'              : returns list of every status of your currencies with the profit you made

                    for UŽIVATEL use your name you had signed with
                    for LOG use log, which has to be a file of '.log' or '.gz' in CSV format


                    WARNING   :     last two (UŽIVATEL & LOG) are mandatory for every action
                    WARNING 2 :     commands like PŘÍKAZ and UŽIVATEL can be used only once at a time

                    Hope it helped :)

         "
}

DT_format_fun() { #checks for right DT format
    if date -d "$1" "+%Y-%m-%d %H:%M:%S" >/dev/null; then
        return 0
    else
        echo "ERROR: Invalid DATETIME format, call for '--help'" >&2
        exit 1
    fi
}

serror_fun(){
    if [ -z "$SORT" ]; then
        exit 0
    fi
}

initial_fun() { #initial awk sort - recursive usage
    SORT=$(echo "$LOG" | awk -F ";" -v name="$NAME" "{if (\$1 == name) {print}}")
    serror_fun "$SORT"
}

ERROR_fun () { #checks basic syntax and returns errors and even more breaf help
    if [ -z "$1" ]; then #if none command was given
        echo "ERROR: Please call for '--help'." >&2
        exit 2
    elif [ -z "$NAME" ]; then #if none NAME was given
        echo "ERROR: No NAME used, please write your name on UŽIVATEL placeholder or call for '--help'." >&2
        exit 3
    elif [ -z "${LOG}" ]; then #if no LOG was found
        echo "ERROR: No LOG used, please put your log on LOG placeholder or call for '--help'." >&2
        exit 4
    fi
}

FLT_fun () { #separate function for FILTER based on recursive initial $ORT, reusable - based on commands
    if [ -n "$FLA" ]; then #after time
        SORT=$(echo "$SORT" | awk -F ";" -v after="$FLA" "{if (after < \$2) {print}}" | sort)
    fi
    if [ -n "$FLB" ]; then #before
        SORT=$(echo "$SORT" | awk -F ";" -v before="$FLB" "{if (before > \$2) {print}}" | sort)
    fi
    if [ -n "$FLC" ]; then #currency
        SORT=$(echo "$SORT" | awk -F ";" -v currency="$FLC" "BEGIN {split(currency, currencies, \" \")}{
                                for (i in currencies){
                                    if (\$3 == currencies[i]) {printf \"%s\n\", \$0; break}}}")
    fi
}

status_fun(){ #needed for recursion in status and profit COMMAND
    SORT=$(echo "$SORT" | awk -F ";" "{code_of_curry=\$3; money_in_the_B=\$4; curry[code_of_curry]+=money_in_the_B}
                               END {for (code_of_curry in curry)
                                   {printf \"%s : %.4f\n\", code_of_curry, curry[code_of_curry] }}" | sort)
    serror_fun "$SORT"
}

CMD_fun () { #COMMAND function
    serror_fun "$SORT"
    case "$CMD" in
        list | "")
            echo "$SORT"
            ;; #for list prints everything with used NAME
        list-currency)
            echo "$SORT" | awk -F ";" "{print \$3}" | sort | uniq
            ;; #for l-c print every used currency (based on NAME again)
        status)
            status_fun "${SORT}"
            echo "$SORT"
            ;; #for status print status of every used currency - counts value of currencies, then prints them
        profit)
            status_fun "${SORT}"
            echo "$SORT" | awk -F ":" -v xtf_profit="${XTF_PROFIT:-20}" "{
                                if (\$2 > 0) {print \$1 \": \" \$2 + \$2*xtf_profit/100}
                                else {print}}" | sort
            ;; #similar to status, yet multiplies currencies with positive status, then adds, then prints
    esac
}

########################################################################################################################
#                                                         MAIN                                                         #
########################################################################################################################

# skontroluj, ci jesto veci dvesto | checks what commands were used
while [ "$#" -gt 0 ]; do #checks for every input - case insensitive
    case "$1" in
        -h | --help)
            print_hlp_fun
            exit 0
            ;; # help had been printed
        -a)
            DT_format_fun "$2"
            FLA="$2"
            shift 2
            ;; # datetime for AFTER had been taken to better place :)
        -b)
            DT_format_fun "$2"
            FLB="$2"
            shift 2
            ;; # -||- BEFORE -||-
        -c)
            FLC_counter=$((FLC_counter+1))
            if [ "$FLC_counter" -eq 1 ]; then
                FLC="$2"
            else
                FLC="${FLC} $2"
            fi
            shift 2
            ;; # code for currency had been added to our bucket list
        list | list-currency | status | profit)
            CMD_counter=$((CMD_counter+1))
            if [ "$CMD_counter" -eq 1 ]; then #quick check if only one command was given
                CMD="$1"
                shift 1
            else #if not, error warns the user
                echo "ERROR: You can use only one COMMAND at once, check '--help'."
                exit 6
            fi
            ;;
        *.log | *.gz)
            LOG_counter=$((LOG_counter+1))
            if [ "$LOG_counter" -eq 1 ]; then #version for empty log variable
                case "$1" in
                    *.gz)
                        LOG="${LOG}$(gzip -d -c "$1")"
                        ;; # uncompressing gzip and saving into log variable
                    *)
                        LOG="${LOG}$(cat "$1")"
                        ;; # saving .log into log variable
                esac
            else #if variable is already filled with some information
                case "$1" in
                    *.gz)
                        LOG="${LOG} \n$(gzip -d -c "$1")"
                        ;;
                    *)
                        LOG="${LOG} \n$(cat "$1")"
                        ;;
                esac
            fi

            shift 1
            ;;
        *)
            NAME_counter=$((NAME_counter+1))
            if [ "$NAME_counter" -eq 1 ]; then #checks for misspelled commands or name overusage
                NAME="$1"
                shift 1
            else
                echo "ERROR: You can use only one name at once. Maybe you just misspelled something, may want to check '--help'."
                exit 7
            fi
            ;;
    esac
done

ERROR_fun  "$NAME","${LOG}"

# ak jesto, cas prikazom dat priestor | if everything's OK - functions initialization begins
initial_fun "${LOG}"
FLT_fun "$FLA","$FLB","$FLC","$NAME","${LOG}"
CMD_fun "$CMD","$NAME","${LOG}"
exit 0